import{_ as l,r as s,o as a,c as i,a as t,b as d,d as o,e as r}from"./app-a06a2d51.js";const p="/image/book.jpg",c={},n=r('<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><h2 id="新书推荐" tabindex="-1"><a class="header-anchor" href="#新书推荐" aria-hidden="true">#</a> 新书推荐</h2><p><a href="https://item.jd.com/10124939676219.html"><img alt="京东链接" src="'+p+'" style="width:360px;margin-right:140px;"></a></p>',3),h={href:"https://item.jd.com/10124939676219.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://detail.tmall.com/item.htm?id=852715481274&skuId=5817727406269",target:"_blank",rel:"noopener noreferrer"},u={href:"https://product.dangdang.com/29809610.html",target:"_blank",rel:"noopener noreferrer"},y=r('<p>依托于 SeldomQA 相关项目的开发和维护，在 <code>自动化测试框架设计</code>、 <code>定制化测试报告设计</code>、 <code>设计模式</code>，以及<code>测试平台开发</code> 方面有着深厚技术积累和独特的设计理念。</p><p>一本真正介绍 <strong>自动化测试框架设计</strong> 的书终于出版了，书中浅显易懂的介绍了 SeldomQA 相关项目中的诸多设计和封装技术。并且，介绍了<code>一个开源自动化测试框架从设计到发布的整个流程</code>。 如果你正在使用SeldomQA相关项目之余，想了解他们背后的设计，那么这本书非常值得购买。</p><h2 id="seldom框架" tabindex="-1"><a class="header-anchor" href="#seldom框架" aria-hidden="true">#</a> seldom框架</h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><blockquote><p>seldom 是基于 unittest 的全功能自动化测试框架；针对自动化测试达到开箱即用。</p></blockquote><p><strong>seldom特点</strong></p><ul><li>支持测试类型（web/app/api)</li><li>丰富的断言</li><li>生成随机测试数据</li><li>用例依赖</li><li>用例分类标签</li><li>支持发送（邮件、钉钉、飞书、企微）消息等</li><li>日志打印</li><li>缓存cache</li><li>命令行工具</li><li>强大的数据驱动（JSON/YAML/CSV/EXCEL）</li><li>HTML/XML报告</li><li>失败重跑&amp;截图</li><li>数据库操作（MySQL/sqlite3/Mongodb）</li><li>支持平台化</li></ul><h3 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念" aria-hidden="true">#</a> 设计理念</h3><p>简单一句话就是回到最初写代码的样子。</p><p>自动化测试框架很多，只有在测试领域有一个比较奇怪的现象，如何用不写代码的方式解决自动化问题。为此，我们发明了用特定领域语言写用例，发明了用 excel 写用例，发明了用 YAML/JSON 写用例。这些方案看似简化了用例的编写，但是，会让解决复杂的问题变得更复杂。比如实现个分支判断/循环，传递参数，调用封装的步骤，编程语言中用 if/for 、变量、函数就实现了，但是用非编程语言的方式写用例处理起来就很麻烦。最终，并不能完全脱离编程，那么为什么不一开始就选择一个编程框架呢？</p><p>然而，seldom的定位是尽量用简单的设计去解决复杂问题，例如 Flask、requests、yagmail...等，这些框架/库都有一个共同的特点，用简单的方式去解决复杂的问题，在编程语言这个层面，并不会给你太多限制，你可以完全使用它，也可以只用一部分，也可以平滑的实现它不支持的功能。</p><p>seldom的目标以就让你用最少的代码编写自动化测试用例，当遇到seldom没有的功能，你可以方便的进行扩展。-- 这就是seldom的设计理念。</p><h3 id="发展历史" tabindex="-1"><a class="header-anchor" href="#发展历史" aria-hidden="true">#</a> 发展历史</h3><p>2015年7月15号我在github上提交一个自动化项目，命名为：<code>pyse</code>， 即各取了<code>python</code> 和 <code>selenium</code>前两个字符。项目非常简单核心就三个文件。</p><ul><li><code>pyse.py</code>：针对 selenium API做了简单封装。</li><li><code>HTMLTestRunner.py</code>: 修改的HTMLTestRunner报告。</li><li><code>TestRunner.py</code>: 一个简单的 unittest运行器。</li></ul><p>之后项目断断续续的在维护，直到2019年，也许是太闲了，加上对UI自动化有了更深入的理解，重新投入主要精力维护pyse项目。</p><p>后来就需要将提交到pypi，这样更方便通过pip安装，发现 <code>pyse</code> 早已经被占用了，后来更名为<code>seldom</code> ，其实命名没有太多寓意，就是看他长得和<code>selenium</code>比较接近。</p><p>2020年1月发布1.0版本，之所以发布1.0 是因为自认为框架的功能比较成熟了，并且花费时间补充了文档。大家都不重视文档，其实文档非常重要，也需要花大量的时间更新和维护。有时候你加个功能很简单，编写说明文档和使用示例就要花费等同的时间。</p><p>1.0 版本之后，项目核心围绕着 selenium API的封装 和 unittest框架扩展（seldom基于unittest）等。</p><p>2021年4月正式发布 2.0，集成requests, 正式支持http接口测试。起因是发现cypress支持http调用，哦，原来UI测试工具也可以去做接口，格局一下子打开了！如何在不影响现有selenium API的情况下集成requests是2.0考虑的重点。</p><p>2022年1月seldom项目正式在公司内部推广使用，当时我们做了几版的接口测试平台，平台的开发维护成本比较高，对于复杂的场景用例，编写成本比框架还要复杂简单；功能也依赖于平台所提供的，相比较而言，框架却有最大的灵活性，可以很好的基于业务做各种设计和封装。</p><p>因为在公司得到推广使用，seldom明显进入了更加快速的迭代开发阶段，并且稳定性、可用性灰得到了很大的提升。</p><p>seldom 3.0 背景 seldom集成App测试是顺理成章的事情，早在几个月前我已经在公司项目中尝试 seldom + appium 进行App自动化测试。App自动化的维护成本确实比接口要高许多，这是由App本身的特点决定的，框架很难做到实质上的改变。</p><p>2022年10月seldom 3.0 beta发布，之所以选择appium有几个原因：</p><ul><li>appium 是由商业工具在维护，历史比较长，不会随意停止维护。</li><li>appium 应用更加广泛，使用得人更多，支持得平台多（android/ios/flutter）</li><li>appium 继承selenium，对于seldom来说对原有API改动最小。</li></ul><p>目前，seldom 3.0 正式版已经发布，欢迎使用。</p><h3 id="seldom-vs-pytest" tabindex="-1"><a class="header-anchor" href="#seldom-vs-pytest" aria-hidden="true">#</a> seldom vs pytest</h3><p>seldom 是建立在 unittest 的基础上的自动化测试框架。与 pytest进行对比，无疑相当于像拿一台<code>电脑</code>与一颗 intel <code>CPU</code> 进行比较，虽然 intel <code>CPU</code> 很强大，但我们无法直接拿一个<code>CPU</code>打游戏，对吧? pytest 就像一个 <code>CPU</code> ，虽然很强大，但无法直接拿来做自动化测试，比如配合各种测试库。而seldom不需要额外安装测试库，即可开始编写自动化测试用例。</p><ul><li>seldom vs pytest 对比差异</li></ul><table><thead><tr><th>功能</th><th>seldom</th><th>pytest</th></tr></thead><tbody><tr><td>web UI测试</td><td>支持 ✅</td><td>支持(需安装 selenium) ⚠️</td></tr><tr><td>web UI断言</td><td>支持（assertText、assertTitle、assertElement） ✅</td><td>不支持 ❌</td></tr><tr><td>playwright</td><td>支持（需安装playwright） ⚠️</td><td>支持(playwright提供playwright-pytest插件) ✅</td></tr><tr><td>失败截图</td><td>支持（自动实现） ✅</td><td>支持（需要设置） ✅</td></tr><tr><td>http接口测试</td><td>支持 ✅</td><td>支持（需安装 requests） ⚠️</td></tr><tr><td>http接口断言</td><td>支持（assertJSON、assertPath、assertSchema） ✅</td><td>不支持 ❌</td></tr><tr><td>app UI测试</td><td>支持 ✅</td><td>支持（需安装 appium） ⚠️</td></tr><tr><td>Page Object模式</td><td>支持（推荐poium） ✅</td><td>支持（推荐poium） ✅</td></tr><tr><td>脚手架</td><td>支持（快速创建项目） ✅</td><td>不支持 ❌</td></tr><tr><td>生成随机测试数据</td><td>支持<code>testdata</code> ✅</td><td>不支持 ❌</td></tr><tr><td>发送消息</td><td>支持（email、钉钉、飞书、微信）✅</td><td>不支持 ❌</td></tr><tr><td>log日志</td><td>支持 ✅</td><td>不支持 ❌</td></tr><tr><td>数据库操作</td><td>支持（sqlite3、MySQL、SQL Server） ✅</td><td>不支持 ❌</td></tr><tr><td>用例依赖</td><td>支持<code>@depend()</code> ✅</td><td><code>@pytest.mark.dependency()</code>支持 ✅</td></tr><tr><td>失败重跑</td><td>支持<code>rerun</code> ✅</td><td>pytest-rerunfailures 支持 ✅</td></tr><tr><td>用例分类标签</td><td>支持<code>@label()</code> ✅</td><td><code>@pytest.mark.xxx</code>支持 ✅</td></tr><tr><td>HTML测试报告</td><td>支持 ✅</td><td>pytest-html、allure ✅</td></tr><tr><td>XML测试报告</td><td>支持 ✅</td><td>自带 <code>--junit-xml</code> ✅</td></tr><tr><td>数据驱动方法</td><td><code>@data()</code> ✅</td><td><code>@pytest.mark.parametrize()</code> ✅</td></tr><tr><td>数据驱动文件</td><td><code>@file_data()</code>(JSON\\YAML\\CSV\\Excel) ✅</td><td>不支持 ❌</td></tr><tr><td>钩子函数</td><td><code>confrun.py</code>用例运行钩子 ⚠️</td><td><code>conftest.py</code> 功能更强大 ✅</td></tr><tr><td>命令行工具CLI</td><td>支持<code>seldom</code> ✅</td><td>支持<code>pytest</code> ✅</td></tr><tr><td>并发执行</td><td>不支持 ❌</td><td>pytest-xdist、pytest-parallel ✅</td></tr><tr><td>平台化</td><td>支持（seldom-platform）✅</td><td>不支持 ❌</td></tr><tr><td>第三方插件</td><td>seldom（unittest）的生态比较糟糕 ⚠️</td><td>pytest有丰富插件生态 ✅</td></tr></tbody></table><p><strong>说明</strong></p><ul><li><p>✅ : 表示支持。</p></li><li><p>⚠️: 支持，但支持的不好，或没有对方好。</p></li><li><p>❌ : 不支持，表示框架没有该功能，第三方插件也没有。</p></li></ul>',32);function _(f,b){const e=s("ExternalLinkIcon");return a(),i("div",null,[n,t("p",null,[d("京东 "),t("a",h,[d("购买链接"),o(e)])]),t("p",null,[d("天猫 "),t("a",m,[d("购买链接"),o(e)])]),t("p",null,[d("当当 "),t("a",u,[d("购买链接"),o(e)])]),y])}const x=l(c,[["render",_],["__file","introduce.html.vue"]]);export{x as default};
